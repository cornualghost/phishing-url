train <- read.csv("train.csv")
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c("No", "Yes"))
train <- read.csv("train.csv")
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c("No", "Yes"))
class(train)
# Supponiamo che 'data' sia il tuo dataframe
variable_types <- sapply(train, class)
# Stampa i tipi di variabili
print(variable_types)
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
View(train)
train <- read.csv("train.csv")
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
View(train)
View(train)
train$status = as.factor(train$status, levels = c("legitimate", "phishing"), labels = c(0, 1))
train$status <- factor(train$status, levels = c("legitimate", "phishing"), labels = c(0, 1))
class(train$status)
table(train$status) / nrow(train)
plot_gg = function(column){
ggplot(data = train, mapping = aes(x = {{column}}, fill = status)) +
geom_bar(position = 'dodge') +
scale_fill_manual('Legenda', values = c("lightblue", "blue"))
}
plot_gg(status) +
ggtitle("Phishing and Legitimate website")
# Librerie ----------------------------------------------------------------
library(patchwork)
library(reshape2)
library(ROCR)
library(MASS)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(plyr)
library(VIM)
library(mice)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
library(Boruta)
library(car)
library(factorMerger)
library(parsnip)
library(caretEnsemble)
library(caTools)
library(funModeling)
library(DALEX)
library(breakDown)
class(train$status)
table(train$status) / nrow(train)
plot_gg = function(column){
ggplot(data = train, mapping = aes(x = {{column}}, fill = status)) +
geom_bar(position = 'dodge') +
scale_fill_manual('Legenda', values = c("lightblue", "blue"))
}
plot_gg(status) +
ggtitle("Phishing and Legitimate website")
plot(train$statistical_report, train$status)
plot(train$statistical_report)
plot_gg(statistical_report) +
ggtitle("statistical_report")
plot_gg = function(column){
ggplot(data = train, mapping = aes(x = {{column}})) +
geom_bar(position = 'dodge') +
scale_fill_manual('Legenda', values = c("lightblue", "blue"))
}
plot_gg(statistical_report) +
ggtitle("statistical_report")
plot_gg = function(column){
ggplot(data = train, mapping = aes(x = {{column}})) +
geom_bar(position = 'dodge') +
scale_fill_manual('Legenda', values = c("lightblue", "blue"))
}
plot_gg1 = function(column){
ggplot(data = train, mapping = aes(x = {{column}})) +
geom_bar(position = 'dodge') +
scale_fill_manual('Legenda', values = c("lightblue", "blue"))
}
plot_gg1(statistical_report) +
ggtitle("statistical_report")
par(mfrow = c(2,3))
plot_gg1(statistical_report)
plot_gg1(ratio_nullHyperlinks)
plot_gg1(ratio_intErrors)
plot_gg1(ratio_intRedirection)
plot_gg1(submit_email)
plot_gg1(sfh)
library(gridExtra)
# Crea una lista di grafici ggplot
p1 <- plot_gg1(statistical_report)
p2 <- plot_gg1(ratio_nullHyperlinks)
p3 <- plot_gg1(ratio_intErrors)
p4 <- plot_gg1(ratio_intRedirection)
p5 <- plot_gg1(submit_email)
p6 <- plot_gg1(sfh)
# Combina i grafici in una griglia
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3)
# Conto valori mancanti per variabile per fare grafico
missing_data <- train2 %>%
summarise_all(function(x) sum(is.na(x) | x == "")) %>%
gather(variable, missing_count)
train <- subset(train, select = -c(statistical_report, ratio_nullHyperlinks, ratio_intErrors,ratio_intRedirection,submit_email,sfh,url ))
# Conto valori mancanti per variabile per fare grafico
missing_data <- train %>%
summarise_all(function(x) sum(is.na(x) | x == "")) %>%
gather(variable, missing_count)
missingness = aggr(train,
col=c('navyblue','yellow'),numbers=TRUE,sortVars=TRUE,
cex.axis=.7,gap=2)
# Librerie ----------------------------------------------------------------
library(patchwork)
library(reshape2)
library(ROCR)
library(MASS)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(plyr)
library(VIM)
library(mice)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
library(Boruta)
library(car)
library(factorMerger)
library(caretEnsemble)
library(caTools)
library(funModeling)
library(DALEX)
library(breakDown)
library(gridExtra)
train <- read.csv("train.csv")
# Trasformare le variabili binarie nel dataset
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
# Rimozione variabili problematiche
plot_gg1 = function(column){
ggplot(data = train, mapping = aes(x = {{column}})) +
geom_bar(position = 'dodge') +
scale_fill_manual('Legenda', values = c("lightblue", "blue"))
}
class(train$status)
table(train$status) / nrow(train)
plot_gg = function(column){
ggplot(data = train, mapping = aes(x = {{column}}, fill = status)) +
geom_bar(position = 'dodge') +
scale_fill_manual('Legenda', values = c("lightblue", "blue"))
}
plot_gg(status) +
ggtitle("Phishing and Legitimate website")
cvCtrl = trainControl(method = "cv", number=10, search="grid", classProbs = TRUE)
rpartTuneCvA = train(status ~ ., data = train, method = "rpart",
tuneLength = 10,
trControl = cvCtrl)
train <- read.csv("train.csv")
# Trasformare le variabili binarie nel dataset
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
#Eliminazioni delle variabili superflue
train <- subset(train, select = -c(statistical_report, ratio_nullHyperlinks, ratio_intErrors,ratio_intRedirection,submit_email,sfh,url ))
cvCtrl = trainControl(method = "cv", number=10, search="grid", classProbs = TRUE)
rpartTuneCvA = train(status ~ ., data = train, method = "rpart",
tuneLength = 10,
trControl = cvCtrl)
rpartTuneCvA
getTrainPerf(rpartTuneCvA)
plot(varImp(object=rpartTuneCvA),main="train tuned - Variable Importance")
plot(rpartTuneCvA)
vi_t = as.data.frame(rpartTuneCvA$finalModel$variable.importance)
viname_t = row.names(vi_t)
head(viname_t)
rfTune = train(status ~ ., data = train, method = "rf",
tuneLength = 10,
trControl = cvCtrl)
rfTune
getTrainPerf(rfTune)
plot(varImp(object=rfTune),main="train tuned - Variable Importance")
plot(rfTune)
vi_rf = data.frame(varImp(rfTune)[1])
vi_rf$var = row.names(vi_rf)
head(vi_rf)
viname_rf = vi_rf[,2]
#
View(vi_rf)
# Librerie ----------------------------------------------------------------
library(patchwork)
library(reshape2)
library(ROCR)
library(MASS)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(plyr)
library(VIM)
library(mice)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
library(Boruta)
library(car)
library(factorMerger)
library(caretEnsemble)
library(caTools)
library(funModeling)
library(DALEX)
library(breakDown)
library(gridExtra)
train <- read.csv("train.csv")
# Trasformare le variabili binarie nel dataset
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
#Eliminazioni delle variabili superflue
train <- subset(train, select = -c(statistical_report, ratio_nullHyperlinks, ratio_intErrors,ratio_intRedirection,submit_email,sfh,url ))
# Conto valori mancanti per variabile per fare grafico
missing_data <- train %>%
summarise_all(function(x) sum(is.na(x) | x == "")) %>%
gather(variable, missing_count)
missingness = aggr(train,
col=c('navyblue','yellow'),numbers=TRUE,sortVars=TRUE,
cex.axis=.7,gap=2)
cvCtrl = trainControl(method = "cv", number=10, search="grid", classProbs = TRUE)
rpartTuneCvA = train(status ~ ., data = train, method = "rpart",
tuneLength = 10,
trControl = cvCtrl)
rpartTuneCvA
getTrainPerf(rpartTuneCvA)
plot(varImp(object=rpartTuneCvA),main="train tuned - Variable Importance")
plot(rpartTuneCvA)
vi_t = as.data.frame(rpartTuneCvA$finalModel$variable.importance)
viname_t = row.names(vi_t)
head(viname_t)
#Boruta
boruta.train = Boruta(status ~., data = train, doTrace = 1)
train$status <- factor(train$status, levels = c(0, 1), labels = c("legitimate", "phishing"))
cvCtrl = trainControl(method = "cv", number=10, search="grid", classProbs = TRUE)
rpartTuneCvA = train(status ~ ., data = train, method = "rpart",
tuneLength = 10,
trControl = cvCtrl)
train <- read.csv("train.csv")
# Trasformare le variabili binarie nel dataset
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
t
#Eliminazioni delle variabili superflue
train <- subset(train, select = -c(statistical_report, ratio_nullHyperlinks, ratio_intErrors,ratio_intRedirection,submit_email,sfh,url ))
# Conto valori mancanti per variabile per fare grafico
missing_data <- train %>%
summarise_all(function(x) sum(is.na(x) | x == "")) %>%
gather(variable, missing_count)
# Librerie ----------------------------------------------------------------
library(patchwork)
library(reshape2)
library(ROCR)
library(MASS)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(plyr)
library(VIM)
library(mice)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
library(Boruta)
library(car)
library(factorMerger)
library(caretEnsemble)
library(caTools)
library(funModeling)
library(DALEX)
library(breakDown)
library(gridExtra)
#Eliminazioni delle variabili superflue
train <- subset(train, select = -c(statistical_report, ratio_nullHyperlinks, ratio_intErrors,ratio_intRedirection,submit_email,sfh,url ))
# Librerie ----------------------------------------------------------------
library(patchwork)
library(reshape2)
library(ROCR)
library(MASS)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(plyr)
library(VIM)
library(mice)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
library(Boruta)
library(car)
library(factorMerger)
library(caretEnsemble)
library(caTools)
library(funModeling)
library(DALEX)
library(breakDown)
library(gridExtra)
train <- read.csv("train.csv")
# Trasformare le variabili binarie nel dataset
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
# Rimozione variabili problematiche
plot_gg1 = function(column){
ggplot(data = train, mapping = aes(x = {{column}})) +
geom_bar(position = 'dodge') +
scale_fill_manual('Legenda', values = c("lightblue", "blue"))
}
train <- subset(train, select = -c(statistical_report, ratio_nullHyperlinks, ratio_intErrors,ratio_intRedirection,submit_email,sfh,url ))
# Conto valori mancanti per variabile per fare grafico
missing_data <- train %>%
summarise_all(function(x) sum(is.na(x) | x == "")) %>%
gather(variable, missing_count)
missingness = aggr(train,
col=c('navyblue','yellow'),numbers=TRUE,sortVars=TRUE,
cex.axis=.7,gap=2)
train$status <- factor(train$status, levels = c(0, 1), labels = c("legitimate", "phishing"))
# Conto valori mancanti per variabile per fare grafico
missing_data <- train %>%
summarise_all(function(x) sum(is.na(x) | x == "")) %>%
gather(variable, missing_count)
missingness = aggr(train,
col=c('navyblue','yellow'),numbers=TRUE,sortVars=TRUE,
cex.axis=.7,gap=2)
osservazione_mancante <- train %>% filter(is.na(status))
print(osservazione_mancante)
osservazione_mancante <- train %>% filter(is.na(status))
print(osservazione_mancante)
missing_data <- train %>%
summarise_all(function(x) sum(is.na(x) | x == "")) %>%
gather(variable, missing_count)
missingness = aggr(train,
col=c('navyblue','yellow'),numbers=TRUE,sortVars=TRUE,
cex.axis=.7,gap=2)
missing_data <- train %>%
summarise_all(function(x) sum(is.na(x) | x == "")) %>%
gather(variable, missing_count)
missingness = aggr(train,
col=c('navyblue','yellow'),numbers=TRUE,sortVars=TRUE,
cex.axis=.7,gap=2)
osservazione_mancante <- train %>% filter(is.na(status))
print(osservazione_mancante)
train <- read.csv("train.csv")
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
valori_unici_status <- unique(train$status)
print(valori_unici_status)
train$status <- factor(train$status, levels = c(0, 1), labels = c("legitimate", "phishing"))
valori_unici_status <- unique(train$status)
print(valori_unici_status)
train <- read.csv("train.csv")
# Trasformare le variabili binarie nel dataset
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
train$status <- factor(train$status)
# Rimozione variabili problematiche
plot_gg1 = function(column){
ggplot(data = train, mapping = aes(x = {{column}})) +
geom_bar(position = 'dodge') +
scale_fill_manual('Legenda', values = c("lightblue", "blue"))
}
#Eliminazioni delle variabili superflue
train <- subset(train, select = -c(statistical_report, ratio_nullHyperlinks, ratio_intErrors,ratio_intRedirection,submit_email,sfh,url ))
# Conto valori mancanti per variabile per fare grafico
missing_data <- train %>%
summarise_all(function(x) sum(is.na(x) | x == "")) %>%
gather(variable, missing_count)
missingness = aggr(train,
col=c('navyblue','yellow'),numbers=TRUE,sortVars=TRUE,
cex.axis=.7,gap=2)
valori_unici_status <- unique(train$status)
print(valori_unici_status)
cvCtrl = trainControl(method = "cv", number=10, search="grid", classProbs = TRUE)
rpartTuneCvA = train(status ~ ., data = train, method = "rpart",
tuneLength = 10,
trControl = cvCtrl)
rpartTuneCvA
getTrainPerf(rpartTuneCvA)
plot(varImp(object=rpartTuneCvA),main="train tuned - Variable Importance")
plot(rpartTuneCvA)
vi_t = as.data.frame(rpartTuneCvA$finalModel$variable.importance)
viname_t = row.names(vi_t)
head(viname_t)
#Random Forest
rfTune = train(status ~ ., data = train, method = "rf",
tuneLength = 10,
trControl = cvCtrl)
#Boruta
boruta.train = Boruta(status ~., data = train, doTrace = 1)
# Librerie ----------------------------------------------------------------
library(patchwork)
library(reshape2)
library(ROCR)
library(MASS)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(plyr)
library(VIM)
library(mice)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
library(Boruta)
library(car)
library(factorMerger)
library(caretEnsemble)
library(caTools)
library(funModeling)
library(DALEX)
library(breakDown)
library(gridExtra)
train <- read.csv("train.csv")
# Trasformare le variabili binarie nel dataset
binary_vars <- sapply(train, function(x) all(x %in% c(0, 1)))
train[binary_vars] <- lapply(train[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
train$status <- factor(train$status)
plot_gg1 = function(column){
ggplot(data = train, mapping = aes(x = {{column}})) +
geom_bar(position = 'dodge') +
scale_fill_manual('Legenda', values = c("lightblue", "blue"))
}
p1 <- plot_gg1(statistical_report)
p2 <- plot_gg1(ratio_nullHyperlinks)
p3 <- plot_gg1(ratio_intErrors)
p4 <- plot_gg1(ratio_intRedirection)
p5 <- plot_gg1(submit_email)
p6 <- plot_gg1(sfh)
# Combina i grafici in una griglia
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3)
test <- read.csv("test.csv")
# Trasformare le variabili binarie nel dataset
binary_vars <- sapply(test, function(x) all(x %in% c(0, 1)))
test[binary_vars] <- lapply(test[binary_vars], factor, levels = c(0, 1), labels = c(0, 1))
test$status <- factor(test$status)
test <- subset(test, select = -c(statistical_report, ratio_nullHyperlinks, ratio_intErrors,ratio_intRedirection,submit_email,sfh,url ))
missing_data <- test %>%
summarise_all(function(x) sum(is.na(x) | x == "")) %>%
gather(variable, missing_count)
missingness = aggr(test,
col=c('navyblue','yellow'),numbers=TRUE,sortVars=TRUE,
cex.axis=.7,gap=2)
